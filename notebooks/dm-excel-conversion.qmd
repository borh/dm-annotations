---
title: Discourse Marker Conversion
jupyter: devenv-dm-annotations
---

```{python}
from typing import Counter
from dm_annotations.corpus import *

import pandas as pd
import polars as pl

df, docs = read_annotations_excel("../resources/analyses/K009_1009 動翼を用いた観測ロケットの適応型姿勢制御系の設計とハードウエア試験.xlsx")
assert len(df) > 0
df
```

```{python}
df.columns
```

```{python}
df.dtypes
```

```{python}
Counter(df["connective_meidai"])
```

```{python}
Counter(df["modality_meidai"])
```

```{python}
df.groupby("section_name").count()
```


```{python}
for doc in docs:
    print(doc._.title)
    print(doc)


```

```{python}
# df["テクスト単位（文単位）"]


# c_name, p_id, s_id, segment_num, text, segment_text, structure, p_meaning, _叙述範囲, _主題の展開, 

import re

# P_RX = re.compile(r"S0*(?P<sentence>\d{1,3})-?(?P<segment>\d)?")
P_RX = re.compile(r"S0*(?P<sentence>\d{1,3})")
DM_FRAGMENT = r"(\w+)\([\)]+\)"
DM_RX = re.compile(rf"(\[?(((\w+)\([^\)]+\))+?)\]?)+?")

print(DM_RX)

from collections import defaultdict
h = defaultdict(list)

sentence, segment = None, None
for r in df.itertuples(name="Row"):
    rid = str(r[0])
    dm_pattern = str(r[2])
    print(rid, "="*20, dm_pattern, DM_RX.match(dm_pattern))

    if match := P_RX.match(rid):
        # new_sentence, new_segment = match.group("sentence"), match.group("segment")
        new_sentence = match.group("sentence")
        new_sentence = int(new_sentence)

        if new_sentence != sentence:
            sentence = new_sentence
            segment = 1
        else:
            segment += 1
    else:
        print(f"adding segment {segment}")
        # Same sentence, new segment
        if segment:
            segment += 1
        else:
            segment = 1
        
    print("->", sentence, segment)
    h[sentence].append((r[3], r[2]))


h
```

